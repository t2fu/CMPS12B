/*
 * Recursion.java
 * Programmer: Tiancheng Fu
 * CMPS 12B
 * Date: July 4th, 2018
 * Cruzid: tfu6
 * This program have 3 void type methods and 2 return type methods and a non-user enter main class.
 * The functions of the methods are listed in the comments
 */
public class Recursion{
  
public static void main(String[] args){//The main class is exactly the same compared to pa1.pdf
//This is a non-user enter main class
 int[] A = {-1, 2, 6, 12, 9, 2, -5, -2, 8, 5, 7};
 int[] B = new int[A.length];
 int[] C = new int[A.length];
 int minIndex = minArrayIndex(A, 0, A.length-1);
 int maxIndex = maxArrayIndex(A, 0, A.length-1);

 for(int x: A) System.out.print(x+" ");
 System.out.println();

 System.out.println( "minIndex = " + minIndex );
 System.out.println( "maxIndex = " + maxIndex );
 reverseArray1(A, A.length, B);
 for(int x: B) System.out.print(x+" ");
 System.out.println();

 reverseArray2(A, A.length, C);
 for(int x: C) System.out.print(x+" ");
 System.out.println();

 reverseArray3(A, 0, A.length-1);
 for(int x: A) System.out.print(x+" ");
 System.out.println();

 } 
static void reverseArray1(int[] X, int n, int[] Y){//This method will copy the leftmost n elements in X[] into the rightmost n positions in Y[] in reverse order 

  if(n > 0) { //If there still is elements left in the array that didn't get copy
         Y[n-1]=X[Y.length-n]; // Copying the nth element from the left in x[] into the nth element from the right in Y[]
         
         reverseArray1(X, n-1, Y); //call the method itself again without the elements that already got copied
      }
  
}

static void reverseArray2(int[] X, int n, int[] Y){//This method will copy the rightmost n elements in X[] into the leftmost n positions in Y[] in reverse order
  
    if(n > 0) { //If there still is elements left in the array that didn't get copy
         Y[Y.length-n]=X[n-1]; // Copying the nth element from the right in x[] into the nth element from the left in Y[]
         
         reverseArray2(X, n-1, Y); //call the method itself again without the elements that already got copied
      }
  
}

static void reverseArray3(int[] X, int i, int j){//This method alters the order of the elements in X[]
  
 if(!(i==j)){//If not all of the elements in X[] got swapped
   
    int temp=X[i];//Declare a temporary integer store varible to store the value which got swapped
    X[i]=X[j];//Swap the two value
    X[j]=temp;//Restore the swapped value from the temporary variable
    //System.out.println("Run");
    reverseArray3(X, i+1, j-1);//Call the method again without the value that already got swapped
    
  }
  
}

static int maxArrayIndex(int[] X, int p, int r){//

   int maxIndex;
    int q,max1,max2;

    //Small(P) when P is one element
    if (p==r) {
       maxIndex=p;
    }
    else {
        // if P is not small, divide P into sub-problems.
        // where to split the set
        q = (p + r) / 2;
        // Solve the sub-problems.
        int result1 = maxArrayIndex(X, p, q);    
        int result2 = maxArrayIndex(X, q+1, r);
        
        max1 = result1;
        max2 = result2;
        // Combine the solutions.
        if (X[max1] < X[max2]){ 
          maxIndex = max2;
        }
        else{
          maxIndex=max1;
        }

    }

    return maxIndex;
}

static int minArrayIndex(int[] X, int p, int r){//
   int minIndex;
    int q,min1,min2;

    //Small(P) when P is one element
    if (p==r) {
       minIndex=p;
    }
    else {
        // if P is not small, divide P into sub-problems.
        // where to split the set
        q = (p + r) / 2;
        // Solve the sub-problems.
        int result1 = minArrayIndex(X, p, q);    
        int result2 = minArrayIndex(X, q+1, r);
        
        min1 = result1;
        min2 = result2;
        // Combine the solutions.
        if (X[min1] > X[min2]){
          minIndex = min2;
        }
        else{
        minIndex=min1;
        }

    }

    return minIndex;
  
}

}